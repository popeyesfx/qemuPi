__________________________________________________
Project Name : Virtual Raspberry Pi Using Qemu

Date: 22/10/2017

Author: J Hider

Description:    The aim of this project is to create a virtual raspberry pi using qemu software. This will be hosted
                on my mac in a virtual machine running Debian linux. This means that it will be a virtual machine
                in a virtual machine which is bound to lead to problems.
___________________________________________________

___________________________________________________

Hardware List :

    Mac Pro

___________________________________________________

___________________________________________________

Software List :
                VMWare Fusion
                Debian 9 Linux iso
                Qemu virtual Machine software
                Raspberry Pi stretch Lite img
                qemu kernel 4.4.34-jessie
                https://blog.agchapman.com/using-qemu-to-emulate-a-raspberry-pi/
___________________________________________________


---------------------------------------------------

Wiring :
                NONE
----------------------------------------------------


----------------------------------------------------
Notes :

Setting up Virtual machine for Debian

1.  Download Debian image from Debian web site
    https://www.debian.org/distrib/
    https://www.debian.org/CD/live/
    amd64 under DVD/USB
    This gives use the debian-live-9.2.0-amd64-gnome.iso which is 2.3 gigs in size

2. Start Vmware Fusion (8 in this case)

3. Select + from the virual machine library screen on the top right and click new

4. Select install from disc or image

5. select use another disc or image at bottom of screen, navigate to debian image

6. In choose operatingsystem select appropriate one, in this case it only goes up to version 8 of debian
    so this was chosen 8.x 64 bit

7. Click finish and installation will start

8. Select graphical debian installer then follow onscreen instructions
    installed as qemuPi
    root password is qemupi
    User Name Jack Hider
    user is jack
    passwd je551ca

    Guided- use entire disk
    All files in 1 partition
    continue
    yes
    yes to network mirror
    UK
    ftp.uk.debian.org
    proxy if required (none)
    load grub loader
    /dev/sda - continue

    On completion restart machine

9. Once restarted we need to shut down the vm and make some changes to the hardware setting
    a.  Reset hard drive size from 20 to 40gb
    b.  Remove printer
    c.  Set memory to 4096 and cpu numbers to 4

    restart
    Set display resolution to 1600 x 1200
    Add jack to sudoers
        a. change to root user su
        b. sudo adduser jack sudo
        c. reboot

10. Install ifconfig
    sudo apt-get install net-tools
    sudo apt-get update
    sudo apt-get upgrade

11. Install VMWare Tools from virtual machine menu
    a. navigate to VMWare tools in files
    b. unpack VMwaretools-10.1.6 to downloads
    c. change to downloads
    d. run vmware-install.pl in terminal as sudo
        [/usr/bin]
        [/etc]
        [/etc/init.d]
        [/usr/sbin]
        [/usr/lib/vmware-tools] - yes create
        [/usr/lib]
        [/var/lib]
        [/usr/share/doc/vmware-tools] - yes create
        yes invoke
        yes share files
        yes enable drag and drop
        yes automatic kernels
        no - no guest autho

    Log out and back in again
    Once logged back i  we can set the shared folder option of the virtual machine if required

Install Qemu on virtual machine

1. sudo apt-get install qemu

Prepare our RaspberryPi image

1. Download kernel image from:
    https://github.com/dhruvvyas90/qemu-rpi-kernel/blob/master/kernel-qemu-4.4.34-jessie

2. Download raspbian image from raspberrypi.org
    in this case i used stretch-lite as i dont need a desktop

3. prepare image for loading:
    qemu-img convert -f raw -O qcow2 2017-09-07-raspbian-stretch-lite.zip raspbian-stretch-lite.qcow

4. Expand our image :
    qemu-img resize raspbian-stretch-lite.qcow +6G


Starting Qemu as root user using sudo

1.  This is a single line command
    sudo qemu-system-arm \  # the qemu arm system
    -kernel ./kernel-qemu-4.4.34-jessie \ # our kernel image
    -append "root=/dev/sda2 panic=1 rootfstype=ext4 rw" \ #  boot args direct to the kernel, telling it where to find it's root filesytem and what type it is
    -hda raspbian-stretch-lite.qcow \ # attach the disc image
    -cpu arm1176 -m 256 \ # processor type and memory size
    -M versatilepb \ # machine we are emulating. versatilepb is the 'ARM Versatile/PB'
    -no-reboot \ # tells QEMU to exit rather than rebooting the machine
    -serial stdio \ # attach serial to host stdio
    -net nic -net user \
    -net tap,ifname=vnet0,script=no,downscript=no # this configures the machine's network stack to attach a NIC,
                                                  # use the user-mode stack, connect the host's vnet0 TAP device to the
                                                  # new NIC and don't use config scripts.

2.  No Machine specified error
    Turn out to be an error in the above command

2. Starts but immediately shuts down again, not sure what is wrong yet need to do some research.

Fixing shutdown issue
Found a possible fix at :
    https://github.com/dhruvvyas90/qemu-rpi-kernel/wiki/Emulating-Jessie-image-with-4.x.xx-kernel

    looks like i need to make adjustments for jessie/stretch as kernel was designed for wheezy

1. Install kpartx
    sudo apt-get install kpartx
    sudo apt-get update
    sudo apt-get upgrade

2. Mount stretch image
    sudo kpartx -av 2017-09-07-raspbian-stretch-lite.img
    -a : add mapping
    -v : verbose mode

    result:
    add map loop0p1 (254:0): 0 85622 linear 7:0 8192
    add map loop0p2 (254:1): 0 3528040 linear 7:0 94208

3. create tmp directory
    sudo mkdir /tmp/raspi

4. mount the partition
    sudo mount /dev/mapper/loop0p2 /tmp/raspi

5. Edit the /tmp/raspi/etc/ld.so.preload
    sudo nano /tmp/raspi/etc/ld.so.preload
    Comment out every entry in it, Ctrl-x Â» Y to save and exit

6. Unmout image
    sudo umount /tmp/raspi

7. Close mappings
    sudo kpartx -dv 2017-09-07-raspbian-stretch-lite.img

    result:
    del devmap : loop0p2
    del devmap : loop0p1
    loop deleted : /dev/loop0

Convert and resize image again

1.  qemu-img convert -f raw -O qcow2 2017-09-07-raspbian-stretch-lite.zip raspbian-stretch-lite.qcow
    qemu-img resize raspbian-stretch-lite.qcow +6G

2. Retry image, didnt work.
    using standard img instead of expanded qcow did work.

    sudo qemu-system-arm \  # the qemu arm system
    -kernel ./kernel-qemu-4.4.34-jessie \ # our kernel image
    -append "root=/dev/sda2 panic=1 rootfstype=ext4 rw" \ #  boot args direct to the kernel, telling it where to find it's root filesytem and what type it is
    -hda 2017-09-07-raspbian-stretch-lite.img \ # attach the disc image
    -cpu arm1176 -m 256 \ # processor type and memory size
    -M versatilepb \ # machine we are emulating. versatilepb is the 'ARM Versatile/PB'
    -no-reboot \ # tells QEMU to exit rather than rebooting the machine
    -serial stdio \ # attach serial to host stdio
    -net nic -net user \
    -net tap,ifname=vnet0,script=no,downscript=no # this configures the machine's network stack to attach a NIC,
                                                  # use the user-mode stack, connect the host's vnet0 TAP device to the
                                                  # new NIC and don't use config scripts.

Resize raw image to 4G

1. qemu-img resize <image_file_name> +4G this adds 4g to partition size

2. Mount image as before, shortened file and kernel file names for ease
    sudo qemu-system-arm -kernel ./kernel-qemu-jessie -append "root=/dev/sda2 panic=1 rootfstype=ext4 rw"
    -hda stretch-lite.img -cpu arm1176 -m 256 -M versatilepb -no-reboot -serial stdio
    -net nic -net user -net tap,ifname=tap0,script=no,downscript=no

3. Use fdisk to resize partition
    a. fdisk /dev/sda
    b. note beginning of second partition 94208 in this case
    c. delete partition 2 with d then 2
    d. create new partition with n then p then 2 use 94208 as beginning of partition
    e. back up with w
    f. restart machine

4. resize root file system with resize2fs /dev/sda2

Installing network connection
1. Install bridge utilities
    sudo apt-get install bridge-utils

2. Edit interfaces file: /etc/network/interfaces
    auto lo ens33 br0

    iface lo inet loopback

    iface ens33 inet manual

    iface br0 inet dhcp
        bridge_ports ens33
        bridge_maxwait 0
        bridge_fd 0

    run ifconfig to check setup after restart

3. Check qemu-bridge-helper is available
    NOTE: qemu bridge helper in: /usr/lib/qemu
    running qemu gives a fail
    qemu-system-arm: -net bridge,name=tap0,bridge=br0,helper=/usr/lib/qemu/qemu-bridge-helper: bridge helper failed

4. Qemu expects a bridge.conf file to be in /etc/qemu/bridge.conf
    so we have to create one
    sudo mkdir -p /etc/qemu/bridge.conf
    add:
    allow br0

5. start with:
    sudo qemu-system-arm -kernel ./kernel-qemu-jessie -append "root=/dev/sda2 panic=1 rootfstype=ext4 rw"
    -hda stretch-lite.img -cpu arm1176 -m 256 -M versatilepb -no-reboot -serial stdio
    -net nic -net bridge,name=tap0,bridge=br0,helper=/usr/lib/qemu/qemu-bridge-helper
